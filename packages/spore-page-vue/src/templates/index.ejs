<template>
  <div class="page page-<%=_.lowerCase(modelName)%>s">
    <el-row>
      <%=schema.description%>列表
    </el-row>

    <%if(filter||actions.create){%>
    <el-form :inline="true" size="mini" :model="filters" class="form-inline">
      <%if(filter){
        for(var name of Object.keys(filter)){
          let property = schema.properties[name];
          if(property.enum&&property['x-enum']){%>
          <el-form-item label="<%=property.description%>">
            <el-select v-model="filters.<%=name%>" placeholder="<%=property.description%>"><%for(let item of property['x-enum']){%>
              <el-option value="<%=item.value%>" label="<%=item.label%>"/><%}%>
            </el-select>
          </el-form-item>
          <%}else{%>
          <el-form-item label="<%=property.description%>">
            <el-input v-model="filters.<%=name%>" placeholder="<%=property.description%>"></el-input>
          </el-form-item>
        <%}
        }
      }%>

      <el-form-item>
        <%if(filter){%><el-button type="primary" @click="onSearch">查询</el-button>
        <el-button @click="clearSearch">重置</el-button><%}%>
        <%if(actions.create){%><el-button type="primary" @click="onCreate">添加</el-button><%}%>
      </el-form-item>
    </el-form>
    <%}%>

    <el-row>
      <el-table
        :data="items"
        border
        size="small"
        :resizable="false"
        style="width: 100%">
        <%for(let name of Object.keys(fields)){
        let item = schema.properties[name];%>
        <el-table-column
          prop="<%=name%>"
          label="<%=item&&item.description%>"
          width="150"
          >
        <%if(item&&item['x-enum']){%>
          <template slot-scope="scope">
            <el-tag>{{scope.row.<%=name%>|<%=name%>Formater}}</el-tag>
          </template>
        <%}%>
        </el-table-column>
        <%}%>

        <el-table-column
          fixed="right"
          label="操作"
          align="center"
          width="150">
          <template slot-scope="scope"><%if(actions.detail){%>
            <el-button @click="onDetail(scope.row)" type="text" size="small">查看</el-button><%}%><%if(actions.edit){%>
            <el-button @click="onEdit(scope.row)" type="text" size="small">编辑</el-button><%}%><%if(actions.delete){%>
            <el-button @click="onDelete(scope.row)" type="text" size="small">删除</el-button><%}%>
          </template>
        </el-table-column>
      </el-table>
    </el-row>
    <%if(pagination){%>
    <el-row style="text-align:right;">
      <el-pagination
        @size-change="onSizeChange"
        @current-change="onCurrentChange"
        :current-page="currentPage"
        :page-sizes="<%=JSON.stringify(pagination['page-sizes'])%>"
        :page-size="pageSize"
        layout="<%=pagination.layout%>"
        :total="total">
      </el-pagination>
    </el-row>
    <%}%>
    <router-view @change="onChange" @delete="onDelete">
    </router-view>
  </div>
</template>


<script>

import { mapState, mapActions ,mapMutations, createNamespacedHelpers } from 'vuex'
const helper = createNamespacedHelpers('<%=storeName%>')


import {<%=modelName%>Detail} from './detail/index.vue';


<%if(actions.create||actions.edit){%>
import Entity from '$defines/<%=_.lowerCase(modelName)%>/entity.js';
<%}

if(actions.create){%>
import creator from '$mould/helper/dialog-creator.js';
import CreateShape from '$defines/<%=_.lowerCase(modelName)%>/shapes/create.js';
<%}
if(actions.edit){%>
import editor from '$mould/helper/dialog-editor.js';
import EditShape from '$defines/<%=_.lowerCase(modelName)%>/shapes/edit.js';
<%}%>

const RESOURCE_NAME="<%=schema.description%>";

const TITLES={
  'destroy':`删除${RESOURCE_NAME}`,
  'create':`添加${RESOURCE_NAME}`,
  'update':`更新${RESOURCE_NAME}`,
};
const MESSAGES_SUCCESS={
  'destroy':'删除成功',
  'create':'添加成功',
  'update':'更新成功',
};
const MESSAGES_FAILED={
  'destroy':'删除失败',
  'create':'添加失败',
  'update':'更新失败',
};




export default {
  name: '<%=_.lowerCase(modelName)%>s',
  props: [],
  components: {
  },

  data(){
    return {<%if(filter){%>
      filters:<%=JSON.stringify(filter)%><%}%>
    };
  },

  computed: {
    ...helper.mapState({
      items: state=>state.items,
      total: state=>state.total,
      pageSize: state=>state.pageSize,
      currentPage: state=>state.currentPage,
      remoteFilters: state=>state.filters,
    }),
  },

  watch: {
    // 表单类 本地data数据与vuex数据同步
    // vuex.form ==> this.form
    remoteFilters(newfilters){
      this.filters = {...newfilters};
    },
  },

  methods:{
    ...helper.mapActions([
      'fetchItems',
      'clearSearch',
      'updateSearch',
      'create',
      'update',
      'destroy',
    ]),

    onSizeChange(size){
      this.updateSearch({pageSize,currentPage:0});
    },

    onCurrentChange(page){
      this.updateSearch({currentPage});
    },

    // ---------搜索过滤
    onSearch(){
      this.updateSearch({currentPage:0,filters:{...this.filters}});
    },

    // ---------创建
    //@create({child:Detail,mode:'create',title:'添加坐席'})
    onCreate(){
      creator(this,this.$createElement,{
        title  : TITLES.create,
        data   : {},
        entity : Entity,
        shape  : CreateShape,
      }).then(rs=>{
        console.log('onCreate',rs);
        this.create(rs);
      });
    },

    // ---------删除
    async onDelete(item,options){
      await this.$alert(`删除<%=schema.description%>"${item.name}"`,
        TITLES.destroy,
      )
      try{
        await this.destroy(item);
        this.$message(MESSAGES_SUCCESS.destroy);
        if(options&&options.goBack){
          // TODO replace
          this.$router.go(-1);
        }
      }catch(e){
        this.$message(MESSAGES_FAILED.destroy);
      }
    },

    // ---------编辑
    onEdit(item){
      this.$router.push({name: '<%=_.lowerCase(modelName)%>-detail-edit',params:{
        <%=_.lowerCase(modelName)%>Id:item.id,
      }});
    },
    onEdit2(item){
      creator(this,this.$createElement,{
        title  : TITLES.update,
        data   : {...item},
        entity : Entity,
        shape  : EditShape,
      }).then(rs=>{
        console.log('onEdit',rs);
        this.update(rs).then(rs=>{
          this.$message({type:'success',message:MESSAGES_SUCCESS.update})
        },err=>{
          this.$message({type:'error',message:MESSAGES_FAILED.update})
        });
      });
    },

    // ---------修改
    async onChange(data){
      console.warn('onChange',data);
      try{
        await this.update({...data});
        this.$message(MESSAGES_SUCCESS.update);
      }catch(e){
        this.$message(MESSAGES_FAILED.update);
      }
    },

    onDetail(item){
      this.$router.push({name: '<%=_.lowerCase(modelName)%>-detail',params:{
        <%=_.lowerCase(modelName)%>Id:item.id,
      }});
    },


  },

  mounted(){
    this.fetchItems();
  },

  filters:{<%for(let item of enums){%>
    <%=item.name%>Formater(type){
      if(typeof(type)=='undefined'){
        return '-';
      }

      let TYPES={<%for(let enumitem of item['x-enum']){%>
          <%=JSON.stringify(enumitem.value)%>:<%=JSON.stringify(enumitem.label)%>,<%}%>
      };

      return TYPES[type];
    },<%}%>
  },

};
</script>


<style lang="less">
.page-<%=_.lowerCase(modelName)%>s{
  .el-row{
    margin-bottom: 10px;
  }
}
</style>

